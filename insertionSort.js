// 插入排序
// 1, 4, 8, 2, 9, 23, 5, 2
// 第一趟 1 自己内部排序完毕
// (1), 4, 8, 2, 9, 23, 5, 2
// 第二趟 4 插入到1里面
// 1和4比， 1 小
// (1, 4), 8, 2, 9, 23, 5, 2
// 第三趟， 8 插入到(1, 4) 里面
// 8 和4比， 4 小， 结束
// (1, 4, 8), 2, 9, 23, 5, 2
// 第4趟， 2 插入到(1, 4, 8) 里面
// 2和8比， 2 小
// (1, 4, 2, 8)
// 2和4比， 2 小
// (1, 2, 4, 8)
// 2和1比， 2 大， 结束
// (1, 2, 4, 8), 9, 23, 5, 2
// 以此类推
// 时间复杂度，从小到大有序O(N^2),从大到小O(N)
let insertionSort = (arr) => {
    // 不是数组或长度小于2，无需排序
    if (!(arr instanceof Array) || arr.length < 2) {
        return
    }
    for (let i = 1; i < arr.length; i++) {
        for (let j = i - 1; j > 0 && arr[j] > arr[j + 1]; j--) {
            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
        }
        // es6解构赋值 最小的数与最前面的数互换

    }
    return arr
}

console.log(insertionSort([1, 4, 8, 2, 9, 23, 5, 2]))